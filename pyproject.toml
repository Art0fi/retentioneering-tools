[tool.poetry]
name = "retentioneering-tools-new-arch"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
numpy = "^1.23.3"
pandas = "^1.5.0"
pre-commit = "^2.20.0"
jupyterlab = "^3.4.7"
notebook = "^6.4.12"
pandas-stubs = "^1.4.4"
poetry = "^1.2.1"
pytest = "^7.1.3"
pydantic = "^1.10.2"
networkx = "^2.8.6"
mypy = "^0.971"
tox-poetry = "^0.4.1"
plotly = "^5.10.0"
seaborn = "^0.12.1"
umap-learn = "^0.5.3"

[tool.poetry.dev-dependencies]

#[tool.poetry.scripts]
#test = { callable = "pytest", extras = ["tests"] }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.pyright]
useLibraryCodeForTypes = false
#strict = ['**']
typeCheckingMode = 'basic'
stubPath = './typings'
exclude = [
    '**/__init__.py',
    './typings',
    './examples',
    './.tox',
    './tests',
    './examples'
    ]
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUnusedClass = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportImportCycles = "error"
reportDuplicateImport = "error"

[tool.pytest.ini_options]
addopts = "-rfs"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestExperimentalApiWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning",
#    "ignore::pandas.errors.SettingWithCopyWarning",
]
